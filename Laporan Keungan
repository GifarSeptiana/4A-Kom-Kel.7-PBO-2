package Form;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.sql.*;
import java.time.format.DateTimeFormatter;

public class LaporanKeuangan extends JPanel {
    private JTable table;
    private DefaultTableModel model;
    private Connection conn;

    public LaporanKeuangan() {
        setLayout(new BorderLayout(10, 10));
        connectDatabase();

        model = new DefaultTableModel(new String[]{
                "ID", "Nama", "Menu", "Jumlah", "Harga Satuan", "Total Harga", "Total Bayar", "Status", "Tanggal"
        }, 0);
        table = new JTable(model);
        add(new JScrollPane(table), BorderLayout.CENTER);

        loadData();
    }

    private void connectDatabase() {
        try {
            conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/db_catering", "root", "");
        } catch (SQLException e) {
            showError("Koneksi database gagal: " + e.getMessage());
        }
    }

    private void loadData() {
        String sql = """
                SELECT 
                    t.id,
                    t.nama,
                    t.menu,
                    t.jumlah,
                    t.harga_satuan,
                    t.total_harga,
                    t.tanggal_transaksi,
                    COALESCE(SUM(l.total_bayar), 0) AS total_bayar,
                    CASE 
                        WHEN COALESCE(SUM(l.total_bayar), 0) >= t.total_harga THEN 'Lunas'
                        ELSE 'Belum Lunas'
                    END AS status
                FROM transaksi t
                LEFT JOIN log_transaksi l ON t.nama = l.nama AND t.no_hp = l.no_hp
                GROUP BY t.id, t.nama, t.menu, t.jumlah, t.harga_satuan, t.total_harga, t.tanggal_transaksi
                ORDER BY t.tanggal_transaksi DESC
                """;

        try (Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(sql)) {
            DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");

            while (rs.next()) {
                model.addRow(new Object[]{
                        rs.getInt("id"),
                        rs.getString("nama"),
                        rs.getString("menu"),
                        rs.getInt("jumlah"),
                        rs.getDouble("harga_satuan"),
                        rs.getDouble("total_harga"),
                        rs.getDouble("total_bayar"),
                        rs.getString("status"),
                        rs.getTimestamp("tanggal_transaksi").toLocalDateTime().format(dtf)
                });
            }
        } catch (SQLException e) {
            showError("Gagal memuat data transaksi: " + e.getMessage());
        }
    }

    private void showError(String pesan) {
        JOptionPane.showMessageDialog(this, pesan, "Error", JOptionPane.ERROR_MESSAGE);
    }
}
